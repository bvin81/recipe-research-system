// Recipe Research System - M≈∞K√ñD≈ê VERZI√ì
class RecipeResearchSystem {
    constructor() {
        this.recipes = [];
        this.translations = {};
        this.currentUser = null;
        this.testGroup = null;
        this.searchStartTime = null;
        
        this.initializeApp();
    }
    
    async initializeApp() {
        console.log('üîÑ Alkalmaz√°s inicializ√°l√°sa...');
        
        // Adatok bet√∂lt√©se
        await this.loadData();
        
        // Event listenrek
        this.setupEventListeners();
        
        // Felhaszn√°l√≥ ellen≈ërz√©se
        this.checkExistingUser();
        
        console.log('‚úÖ Alkalmaz√°s inicializ√°lva');
    }
    
    async loadData() {
        try {
            console.log('üîÑ Adatok bet√∂lt√©se...');
            
            // Pr√≥b√°ljuk bet√∂lteni a recepteket
            try {
                const recipesResponse = await fetch('./data/recipes_sample.json');
                if (recipesResponse.ok) {
                    this.recipes = await recipesResponse.json();
                    console.log(`‚úÖ Bet√∂ltve ${this.recipes.length} recept`);
                } else {
                    throw new Error('Receptek bet√∂lt√©se sikertelen');
                }
            } catch (error) {
                console.log('‚ö†Ô∏è Receptek bet√∂lt√©se sikertelen, teszt adatok haszn√°lata');
                this.loadFallbackData();
            }
            
            // Pr√≥b√°ljuk bet√∂lteni a ford√≠t√°sokat
            try {
                const translationsResponse = await fetch('./data/translations.json');
                if (translationsResponse.ok) {
                    this.translations = await translationsResponse.json();
                    console.log(`‚úÖ Bet√∂ltve ${Object.keys(this.translations).length} ford√≠t√°s`);
                } else {
                    throw new Error('Ford√≠t√°sok bet√∂lt√©se sikertelen');
                }
            } catch (error) {
                console.log('‚ö†Ô∏è Ford√≠t√°sok bet√∂lt√©se sikertelen, alap√©rtelmezett ford√≠t√°sok');
                this.loadBasicTranslations();
            }
            
        } catch (error) {
            console.error('‚ùå Adatok bet√∂lt√©si hiba:', error);
            this.loadFallbackData();
            this.loadBasicTranslations();
        }
    }
    
    loadFallbackData() {
        console.log('üìã Teszt adatok bet√∂lt√©se...');
        this.recipes = [
            {
                recipeid: 1,
                name: "√Åfony√°s Joghurt",
                ingredients: "√°fonya, cukor, joghurt, citroml√©",
                env_score: 12.1,
                nutri_score: 18.9,
                sustainability_index: 65.2,
                recommendation_type: 'ingredient_based'
            },
            {
                recipeid: 2,
                name: "Z√∂lds√©ges Leves",
                ingredients: "paradicsoml√©, k√°poszta, hagyma, s√°rgar√©pa",
                env_score: 19.3,
                nutri_score: 51.3,
                sustainability_index: 72.1,
                recommendation_type: 'sustainability_optimized'
            },
            {
                recipeid: 3,
                name: "Csirke Recept",
                ingredients: "csirke, hagyma, paradicsom, s√≥, bors",
                env_score: 25.4,
                nutri_score: 45.8,
                sustainability_index: 68.5,
                recommendation_type: 'ingredient_based'
            },
            {
                recipeid: 4,
                name: "Tejsz√≠nes T√©szta",
                ingredients: "t√©szta, tejsz√≠n, sajt, fokhagyma, petrezselyem",
                env_score: 30.2,
                nutri_score: 38.9,
                sustainability_index: 55.3,
                recommendation_type: 'sustainability_optimized'
            }
        ];
        console.log(`‚úÖ ${this.recipes.length} teszt recept bet√∂ltve`);
    }
    
    loadBasicTranslations() {
        this.translations = {
            'chicken': 'csirke',
            'onion': 'hagyma',
            'tomato': 'paradicsom',
            'milk': 'tej',
            'egg': 'toj√°s',
            'salt': 's√≥',
            'sugar': 'cukor',
            'garlic': 'fokhagyma',
            'pepper': 'bors',
            'cheese': 'sajt'
        };
        console.log(`‚úÖ ${Object.keys(this.translations).length} alapford√≠t√°s bet√∂ltve`);
    }
    
    setupEventListeners() {
        try {
            // Regisztr√°ci√≥
            const regForm = document.getElementById('registration-form');
            if (regForm) {
                regForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.handleRegistration();
                });
            }
            
            // Keres√©s
            const searchBtn = document.getElementById('search-btn');
            if (searchBtn) {
                searchBtn.addEventListener('click', () => {
                    this.handleSearch();
                });
            }
            
            // Enter a keres√©shez
            const searchInput = document.getElementById('ingredient-search');
            if (searchInput) {
                searchInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.handleSearch();
                    }
                });
            }
            
            // √öj keres√©s
            const newSearchBtn = document.getElementById('new-search-btn');
            if (newSearchBtn) {
                newSearchBtn.addEventListener('click', () => {
                    this.showSection('search-section');
                    const searchInput = document.getElementById('ingredient-search');
                    if (searchInput) searchInput.value = '';
                    const resultsDiv = document.getElementById('search-results');
                    if (resultsDiv) resultsDiv.innerHTML = '';
                });
            }
            
            console.log('‚úÖ Event listeners be√°ll√≠tva');
        } catch (error) {
            console.error('‚ùå Event listeners hiba:', error);
        }
    }
    
    checkExistingUser() {
        try {
            const savedUser = localStorage.getItem('recipeUser');
            if (savedUser) {
                this.currentUser = JSON.parse(savedUser);
                this.testGroup = this.currentUser.testGroup;
                this.showSection('search-section');
                this.updateUserDisplay();
                console.log('‚úÖ Megl√©v≈ë felhaszn√°l√≥ bet√∂ltve:', this.testGroup + ' csoport');
            } else {
                this.showSection('registration-section');
                console.log('üìù √öj felhaszn√°l√≥ - regisztr√°ci√≥ sz√ºks√©ges');
            }
        } catch (error) {
            console.error('‚ùå Felhaszn√°l√≥ ellen≈ërz√©si hiba:', error);
            this.showSection('registration-section');
        }
    }
    
    handleRegistration() {
        try {
            console.log('üìù Regisztr√°ci√≥ kezd√©se...');
            
            const emailInput = document.getElementById('email');
            if (!emailInput) {
                throw new Error('Email mez≈ë nem tal√°lhat√≥');
            }
            
            const email = emailInput.value;
            if (!email) {
                alert('K√©rj√ºk, adjon meg email c√≠met!');
                return;
            }
            
            // User ID gener√°l√°s
            const userId = Date.now() + Math.random().toString(36).substr(2, 9);
            
            // Teszt csoport hozz√°rendel√©s (A/B/C)
            const testGroup = this.assignTestGroup(userId);
            
            // Felhaszn√°l√≥ objektum
            const user = {
                id: userId,
                email: email,
                testGroup: testGroup,
                registeredAt: new Date().toISOString()
            };
            
            // Helyi t√°rol√°s
            this.currentUser = user;
            this.testGroup = testGroup;
            localStorage.setItem('recipeUser', JSON.stringify(user));
            
            console.log('‚úÖ Regisztr√°ci√≥ sikeres:', user);
            
            // UI √°tv√°lt√°s
            this.showSection('search-section');
            this.updateUserDisplay();
            
        } catch (error) {
            console.error('‚ùå Regisztr√°ci√≥s hiba:', error);
            alert('Regisztr√°ci√≥s hiba t√∂rt√©nt. Pr√≥b√°lja √∫jra!');
        }
    }
    
    assignTestGroup(userId) {
        // Hash alap√∫ konzisztens hozz√°rendel√©s (A/B/C)
        const hash = this.simpleHash(userId.toString());
        const groups = ['A', 'B', 'C'];
        return groups[hash % 3];
    }
    
    simpleHash(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return Math.abs(hash);
    }
    
    updateUserDisplay() {
        try {
            const groupDescriptions = {
                'A': 'Kontroll csoport',
                'B': 'Fenntarthat√≥s√°gi pontsz√°mokkal', 
                'C': 'Fenntarthat√≥s√°g + AI magyar√°zatok'
            };
            
            const userGroupElement = document.getElementById('user-group');
            if (userGroupElement) {
                userGroupElement.textContent = 
                    `${this.testGroup} (${groupDescriptions[this.testGroup]})`;
            }
            
            console.log(`‚úÖ Felhaszn√°l√≥i csoport megjelen√≠tve: ${this.testGroup}`);
        } catch (error) {
            console.error('‚ùå Felhaszn√°l√≥i megjelen√≠t√©s hiba:', error);
        }
    }
    
    handleSearch() {
        try {
            console.log('üîç Keres√©s kezd√©se...');
            
            const searchInput = document.getElementById('ingredient-search');
            if (!searchInput) {
                throw new Error('Keres√©si mez≈ë nem tal√°lhat√≥');
            }
            
            const ingredients = searchInput.value;
            if (!ingredients.trim()) {
                alert('K√©rj√ºk, adjon meg legal√°bb egy hozz√°val√≥t!');
                return;
            }
            
            console.log(`üîç Keres√©si kifejez√©s: "${ingredients}"`);
            
            this.searchStartTime = Date.now();
            
            // Keres√©s v√©grehajt√°sa
            const results = this.getRecommendations(ingredients, this.testGroup);
            console.log(`üìã Tal√°latok: ${results.length} recept`);
            
            this.displayResults(results, ingredients);
            
        } catch (error) {
            console.error('‚ùå Keres√©si hiba:', error);
            alert('Keres√©si hiba t√∂rt√©nt. Pr√≥b√°lja √∫jra!');
        }
    }
    
    getRecommendations(searchIngredients, testGroup, numRecommendations = 10) {
        const ingredientList = searchIngredients.toLowerCase().split(',').map(s => s.trim());
        
        // Alapsz≈±r√©s
        let matched = this.filterByIngredients(ingredientList);
        
        if (matched.length === 0) {
            // Ha nincs tal√°lat, adjunk vissza n√©h√°ny receptet
            matched = this.recipes.slice(0, Math.min(4, this.recipes.length));
            console.log('‚ö†Ô∏è Nincs k√∂zvetlen tal√°lat, alternat√≠v receptek megjelen√≠t√©se');
        }
        
        // Csoport specifikus logika
        switch(testGroup) {
            case 'A': // Control - egyszer≈± lista
                return this.shuffleArray([...matched]).slice(0, numRecommendations);
                
            case 'B': // Health + Environment
            case 'C': // B + XAI
                // Fenntarthat√≥s√°g szerint rendez√©s
                const sorted = matched.sort((a, b) => 
                    (b.sustainability_index || 0) - (a.sustainability_index || 0)
                );
                return sorted.slice(0, numRecommendations);
                
            default:
                return matched.slice(0, numRecommendations);
        }
    }
    
    filterByIngredients(ingredientList) {
        return this.recipes.filter(recipe => {
            const recipeIngredients = recipe.ingredients.toLowerCase();
            return ingredientList.some(ingredient => 
                recipeIngredients.includes(ingredient)
            );
        });
    }
    
    shuffleArray(array) {
        const shuffled = [...array];
        for (let i = shuffled.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
        }
        return shuffled;
    }
    
    displayResults(recipes, searchIngredients) {
        try {
            const resultsDiv = document.getElementById('search-results');
            if (!resultsDiv) {
                throw new Error('Eredm√©nyek div nem tal√°lhat√≥');
            }
            
            if (recipes.length === 0) {
                resultsDiv.innerHTML = '<p>Nem tal√°ltunk receptet. Pr√≥b√°lja: csirke, hagyma, paradicsom, tej</p>';
                return;
            }
            
            let html = '<h3>üìã Aj√°nlott receptek:</h3>';
            
            recipes.forEach((recipe, index) => {
                html += this.generateRecipeCard(recipe, index, searchIngredients);
            });
            
            resultsDiv.innerHTML = html;
            console.log(`‚úÖ ${recipes.length} recept megjelen√≠tve`);
            
        } catch (error) {
            console.error('‚ùå Eredm√©nyek megjelen√≠t√©si hiba:', error);
        }
    }
    
    generateRecipeCard(recipe, index, searchIngredients) {
        const showScores = ['B', 'C'].includes(this.testGroup);
        const showXAI = this.testGroup === 'C';
        
        return `
            <div class="recipe-card">
                <div class="recipe-name">${recipe.name || `Recept #${recipe.recipeid}`}</div>
                <div class="recipe-ingredients">
                    <strong>Hozz√°val√≥k:</strong> ${recipe.ingredients}
                </div>
                
                ${showScores ? `
                    <div class="sustainability-scores">
                        <div class="score env-score">
                            üåç K√∂rnyezeti pontsz√°m: ${recipe.env_score?.toFixed(1) || 'N/A'}
                        </div>
                        <div class="score nutri-score">
                            üíö T√°pl√°lkoz√°si pontsz√°m: ${recipe.nutri_score?.toFixed(1) || 'N/A'}
                        </div>
                        <div class="score">
                            ‚≠ê Fenntarthat√≥s√°g: ${recipe.sustainability_index?.toFixed(1) || 'N/A'}/100
                        </div>
                    </div>
                ` : ''}
                
                ${showXAI ? `
                    <div class="xai-explanation">
                        <strong>üß† Mi√©rt aj√°nljuk:</strong>
                        <p>${this.generateXAIExplanation(recipe)}</p>
                    </div>
                ` : ''}
                
                <button class="select-recipe-btn" 
                        onclick="app.selectRecipe(${recipe.recipeid}, '${(recipe.name || 'Recept').replace(/'/g, "\\'")}', ${index + 1}, '${searchIngredients.replace(/'/g, "\\'")}')">
                    ‚úÖ Ezt v√°lasztom
                </button>
            </div>
        `;
    }
    
    generateXAIExplanation(recipe) {
        const sustainability = recipe.sustainability_index || 0;
        
        if (sustainability >= 70) {
            return "Ez egy kiv√°l√≥ fenntarthat√≥ v√°laszt√°s magas t√°p√©rt√©kkel √©s alacsony k√∂rnyezeti hat√°ssal.";
        } else if (sustainability >= 50) {
            return "J√≥ egyens√∫ly a fenntarthat√≥s√°g √©s az eg√©szs√©g k√∂z√∂tt.";
        } else {
            return "Alapvet≈ë recept, amely m√©g fejleszthet≈ë fenntarthat√≥s√°gi szempontb√≥l.";
        }
    }
    
    selectRecipe(recipeId, recipeName, rank, searchIngredients) {
        try {
            const decisionTime = this.searchStartTime ? (Date.now() - this.searchStartTime) / 1000 : 0;
            
            const choiceData = {
                userId: this.currentUser?.id || 'unknown',
                testGroup: this.testGroup || 'unknown',
                recipeId: recipeId,
                recipeName: recipeName,
                rank: rank,
                searchIngredients: searchIngredients,
                decisionTime: decisionTime,
                timestamp: new Date().toISOString()
            };
            
            console.log('‚úÖ Recept v√°laszt√°s:', choiceData);
            
            // Helyi t√°rol√°s
            this.saveChoiceLocally(choiceData);
            
            alert(`K√∂sz√∂nj√ºk! V√°lasztott recept: ${recipeName}`);
            
            this.showSection('thank-you-section');
            
        } catch (error) {
            console.error('‚ùå Recept v√°laszt√°si hiba:', error);
            alert('V√°laszt√°si hiba t√∂rt√©nt, de r√∂gz√≠tett√ºk a v√°laszt√°s√°t.');
        }
    }
    
    saveChoiceLocally(choiceData) {
        try {
            const choices = JSON.parse(localStorage.getItem('userChoices') || '[]');
            choices.push(choiceData);
            localStorage.setItem('userChoices', JSON.stringify(choices));
            console.log('‚úÖ V√°laszt√°s mentve helyileg');
        } catch (error) {
            console.error('‚ùå Helyi ment√©s hiba:', error);
        }
    }
    
    showSection(sectionId) {
        try {
            document.querySelectorAll('.section').forEach(section => {
                section.classList.add('hidden');
            });
            
            const targetSection = document.getElementById(sectionId);
            if (targetSection) {
                targetSection.classList.remove('hidden');
                console.log(`‚úÖ Szakasz megjelen√≠tve: ${sectionId}`);
            } else {
                console.error(`‚ùå Szakasz nem tal√°lhat√≥: ${sectionId}`);
            }
        } catch (error) {
            console.error('‚ùå Szakasz megjelen√≠t√©si hiba:', error);
        }
    }
}

// Alkalmaz√°s ind√≠t√°sa
let app;
document.addEventListener('DOMContentLoaded', () => {
    try {
        console.log('üöÄ Alkalmaz√°s ind√≠t√°sa...');
        app = new RecipeResearchSystem();
    } catch (error) {
        console.error('‚ùå Alkalmaz√°s ind√≠t√°si hiba:', error);
        alert('Az alkalmaz√°s ind√≠t√°sa sikertelen. Pr√≥b√°lja √∫jrat√∂lteni az oldalt.');
    }
});
