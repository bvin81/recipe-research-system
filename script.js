// Recipe Research System - LEGFRISSEBB TELJES VERZI√ì
// 1000 magyar recept + minden tov√°bbfejleszt√©s + JAV√çTOTT K√ñRNYEZETI LOGIKA

class RecipeResearchSystem {
    constructor() {
        this.recipes = [];
        this.currentUser = null;
        this.testGroup = null;
        this.searchStartTime = null;
        
        this.initializeApp();
    }
    
    async initializeApp() {
        console.log('üöÄ Recipe Research System - Legfrissebb verzi√≥ ind√≠t√°sa...');
        console.log('üìÖ Verzi√≥: 2025.06.18 - Magyar receptekkel + Jav√≠tott k√∂rnyezeti logika');
        
        // Adatok bet√∂lt√©se (val√≥s vagy fallback)
        await this.loadEnhancedData();
        
        // Event listenrek be√°ll√≠t√°sa
        this.setupEventListeners();
        
        // Felhaszn√°l√≥ ellen≈ërz√©se
        this.checkExistingUser();
        
        console.log('‚úÖ Alkalmaz√°s k√©sz! Receptek sz√°ma:', this.recipes.length);
    }
    
    async loadEnhancedData() {
        console.log('üìã Val√≥s magyar receptadatok bet√∂lt√©se...');
        
        try {
            // Megpr√≥b√°ljuk bet√∂lteni a 1000 magyar receptet
            const response = await fetch('./data/recipes_hungarian_best1000.json');
            
            if (response.ok) {
                this.recipes = await response.json();
                console.log('‚úÖ Magyar receptek sikeresen bet√∂ltve:', this.recipes.length, 'recept');
                
                // Statisztik√°k
                if (this.recipes.length > 0) {
                    const avgSustainability = this.recipes.reduce((sum, r) => sum + (r.sustainability_index || 0), 0) / this.recipes.length;
                    console.log('üìä √Åtlagos fenntarthat√≥s√°g:', avgSustainability.toFixed(1));
                    
                    // Receptek el≈ëk√©sz√≠t√©se
                    this.prepareRecipes();
                }
                
            } else {
                throw new Error(`HTTP ${response.status}: Magyar receptek nem el√©rhet≈ëk`);
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Magyar receptek bet√∂lt√©se sikertelen:', error.message);
            console.log('üîÑ Fallback teszt adatok haszn√°lata...');
            this.loadFallbackData();
        }
    }
    
    prepareRecipes() {
        console.log('üîß Receptek el≈ëk√©sz√≠t√©se...');
        
        let categorizedCount = 0;
        
        // Kateg√≥ri√°k √©s ikonok hozz√°ad√°sa
        this.recipes.forEach((recipe, index) => {
            // Kateg√≥ria hozz√°ad√°sa ha nincs
            if (!recipe.category) {
                recipe.category = this.determineCategory(recipe);
                categorizedCount++;
            }
            
            // Ikon hozz√°ad√°sa
            if (!recipe.categoryIcon) {
                recipe.categoryIcon = this.getCategoryIcon(recipe.category);
            }
            
            // Biztons√°gos √©rt√©kek
            recipe.env_score = recipe.env_score || 0;
            recipe.nutri_score = recipe.nutri_score || 0;
            recipe.sustainability_index = recipe.sustainability_index || 0;
            recipe.name = recipe.name || `Recept #${recipe.recipeid || index + 1}`;
            recipe.ingredients = recipe.ingredients || 'Ismeretlen hozz√°val√≥k';
        });
        
        // Kateg√≥ria statisztik√°k
        const categoryCounts = {};
        this.recipes.forEach(recipe => {
            const cat = recipe.category || 'egy√©b';
            categoryCounts[cat] = (categoryCounts[cat] || 0) + 1;
        });
        
        console.log('üè∑Ô∏è Kateg√≥ri√°k hozz√°adva:', categorizedCount, 'recepthez');
        console.log('üìä Kateg√≥ria megoszl√°s:', categoryCounts);
    }
    
    determineCategory(recipe) {
        const name = (recipe.name || '').toLowerCase();
        const ingredients = (recipe.ingredients || '').toLowerCase();
        const text = name + ' ' + ingredients;
        
        // Kateg√≥ria szab√°lyok (magyar nyelvre optimaliz√°lva)
        const categoryRules = {
            'leves': ['leves', 'h√∫sl√©', 'alapl√©', 'soup', 'broth'],
            'sal√°ta': ['sal√°ta', 'salad', 'uborka', 'lettuce', 'vegyes'],
            'f≈ë√©tel': ['csirke', 'chicken', 'marhah√∫s', 'beef', 'hal', 'fish', 'sert√©sh√∫s', 'pork', 't√©szta', 'pasta', 'rizs', 'rice', 'steak', 'schnitzel'],
            'desszert': ['cukor', 'sugar', 'm√©z', 'honey', 'csokol√°d√©', 'chocolate', 's√ºtem√©ny', 'cake', 'torta', 'keksz'],
            'ital': ['smoothie', 'juice', 'tea', 'coffee', 'ital', 'shake', 'kokt√©l'],
            'reggeli': ['toj√°s', 'egg', 'omlett', 'pancake', 'm√ºzli', 'cereal', 'zabk√°sa', 'pir√≠t√≥s'],
            'k√∂ret': ['burgonya', 'potato', 's√°rgar√©pa', 'carrot', 'brokkoli', 'sp√°rga', 'z√∂lds√©g k√∂ret']
        };
        
        // Els≈ë tal√°lat alapj√°n kategoriz√°l√°s
        for (const [category, keywords] of Object.entries(categoryRules)) {
            if (keywords.some(keyword => text.includes(keyword))) {
                return category;
            }
        }
        
        return 'egy√©b';
    }
    
    getCategoryIcon(category) {
        const categoryIcons = {
            'f≈ë√©tel': 'üçΩÔ∏è',
            'leves': 'üç≤',
            'sal√°ta': 'ü•ó',
            'desszert': 'üç∞',
            'ital': 'ü•§',
            'reggeli': 'üç≥',
            'k√∂ret': 'ü•Ñ',
            'egy√©b': 'üç¥'
        };
        
        return categoryIcons[category] || 'üç¥';
    }
    
    loadFallbackData() {
        console.log('üîÑ Fallback teszt adatok bet√∂lt√©se...');
        
        this.recipes = [
            {
                recipeid: 1,
                name: "Z√∂lds√©g Sal√°ta",
                ingredients: "Sal√°ta, Paradicsom, Uborka, Hagyma, Ol√≠vaolaj",
                env_score: 6.2,
                nutri_score: 58.1,
                sustainability_index: 82.3,
                category: "sal√°ta",
                categoryIcon: "ü•ó"
            },
            {
                recipeid: 2,
                name: "Csirke Recept",
                ingredients: "Csirke, Hagyma, Paradicsom, S√≥, Bors",
                env_score: 25.4,
                nutri_score: 45.8,
                sustainability_index: 68.5,
                category: "f≈ë√©tel",
                categoryIcon: "üçΩÔ∏è"
            },
            {
                recipeid: 3,
                name: "Gy√ºm√∂lcs Smoothie",
                ingredients: "Ban√°n, Eper, Joghurt, M√©z, √Åfonya",
                env_score: 8.7,
                nutri_score: 62.4,
                sustainability_index: 78.9,
                category: "ital",
                categoryIcon: "ü•§"
            },
            {
                recipeid: 4,
                name: "Z√∂lds√©ges Leves",
                ingredients: "Paradicsoml√©, K√°poszta, Hagyma, S√°rgar√©pa",
                env_score: 11.3,
                nutri_score: 51.3,
                sustainability_index: 72.1,
                category: "leves",
                categoryIcon: "üç≤"
            },
            {
                recipeid: 5,
                name: "Tejsz√≠nes T√©szta",
                ingredients: "T√©szta, Tejsz√≠n, Sajt, Fokhagyma, Petrezselyem",
                env_score: 30.2,
                nutri_score: 38.9,
                sustainability_index: 55.3,
                category: "f≈ë√©tel",
                categoryIcon: "üçΩÔ∏è"
            },
            {
                recipeid: 6,
                name: "Marhah√∫s Steak",
                ingredients: "Marhah√∫s, S√≥, Bors, Fokhagyma, Rozmaring",
                env_score: 65.8,
                nutri_score: 71.2,
                sustainability_index: 35.4,
                category: "f≈ë√©tel",
                categoryIcon: "üçΩÔ∏è"
            },
            {
                recipeid: 7,
                name: "Hal Fil√©",
                ingredients: "Hal, Citrom, Petrezselyem, Vaj, Feh√©rbor",
                env_score: 22.1,
                nutri_score: 67.3,
                sustainability_index: 69.8,
                category: "f≈ë√©tel",
                categoryIcon: "üçΩÔ∏è"
            },
            {
                recipeid: 8,
                name: "√Åfony√°s Joghurt",
                ingredients: "√Åfonya, Cukor, Joghurt, Citroml√©",
                env_score: 12.1,
                nutri_score: 18.9,
                sustainability_index: 65.2,
                category: "desszert",
                categoryIcon: "üç∞"
            }
        ];
        
        console.log('‚úÖ Fallback adatok bet√∂ltve:', this.recipes.length, 'recept');
        
        // Fallback eset√©n is kategoriz√°l√°s
        this.prepareRecipes();
    }
    
    setupEventListeners() {
        console.log('üéß Event listeners be√°ll√≠t√°sa...');
        
        try {
            // Regisztr√°ci√≥
            const regForm = document.getElementById('registration-form');
            if (regForm) {
                regForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    this.handleRegistration();
                });
            }
            
            // Keres√©s gomb
            const searchBtn = document.getElementById('search-btn');
            if (searchBtn) {
                searchBtn.addEventListener('click', () => {
                    this.handleSearch();
                });
            }
            
            // Enter billenty≈± a keres√©shez
            const searchInput = document.getElementById('ingredient-search');
            if (searchInput) {
                searchInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.handleSearch();
                    }
                });
            }
            
            // √öj keres√©s
            const newSearchBtn = document.getElementById('new-search-btn');
            if (newSearchBtn) {
                newSearchBtn.addEventListener('click', () => {
                    this.showSection('search-section');
                    if (searchInput) searchInput.value = '';
                    const resultsDiv = document.getElementById('search-results');
                    if (resultsDiv) resultsDiv.innerHTML = '';
                });
            }
            
            console.log('‚úÖ Event listeners sikeresen be√°ll√≠tva');
            
        } catch (error) {
            console.error('‚ùå Event listener be√°ll√≠t√°si hiba:', error);
        }
    }
    
    checkExistingUser() {
        try {
            const savedUser = localStorage.getItem('recipeUser');
            if (savedUser) {
                this.currentUser = JSON.parse(savedUser);
                this.testGroup = this.currentUser.testGroup;
                this.showSection('search-section');
                this.updateUserDisplay();
                console.log('üë§ Megl√©v≈ë felhaszn√°l√≥ bet√∂ltve:', this.testGroup + ' csoport');
            } else {
                this.showSection('registration-section');
                console.log('üìù √öj felhaszn√°l√≥ - regisztr√°ci√≥ sz√ºks√©ges');
            }
        } catch (error) {
            console.error('‚ùå Felhaszn√°l√≥ ellen≈ërz√©si hiba:', error);
            this.showSection('registration-section');
        }
    }
    
    handleRegistration() {
        try {
            const emailInput = document.getElementById('email');
            if (!emailInput) {
                throw new Error('Email mez≈ë nem tal√°lhat√≥');
            }
            
            const email = emailInput.value.trim();
            if (!email) {
                alert('K√©rj√ºk, adjon meg √©rv√©nyes email c√≠met!');
                return;
            }
            
            // Egyedi User ID gener√°l√°s
            const userId = Date.now() + Math.random().toString(36).substr(2, 9);
            
            // A/B/C teszt csoport hozz√°rendel√©s
            const testGroup = this.assignTestGroup(userId);
            
            // Felhaszn√°l√≥ objektum
            const user = {
                id: userId,
                email: email,
                testGroup: testGroup,
                registeredAt: new Date().toISOString(),
                version: '2025.06.18'
            };
            
            // Ment√©s
            this.currentUser = user;
            this.testGroup = testGroup;
            localStorage.setItem('recipeUser', JSON.stringify(user));
            
            console.log('‚úÖ Regisztr√°ci√≥ sikeres:', user);
            
            // UI √°tv√°lt√°s
            this.showSection('search-section');
            this.updateUserDisplay();
            
        } catch (error) {
            console.error('‚ùå Regisztr√°ci√≥s hiba:', error);
            alert('Regisztr√°ci√≥s hiba t√∂rt√©nt. K√©rj√ºk, pr√≥b√°lja √∫jra!');
        }
    }
    
    assignTestGroup(userId) {
        // Hash alap√∫ konzisztens csoport hozz√°rendel√©s (33-33-34%)
        const hash = this.simpleHash(userId.toString());
        const groups = ['A', 'B', 'C'];
        return groups[hash % 3];
    }
    
    simpleHash(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return Math.abs(hash);
    }
    
    updateUserDisplay() {
        try {
            const groupDescriptions = {
                'A': 'Kontroll csoport - alapvet≈ë receptek',
                'B': 'Fenntarthat√≥s√°gi pontsz√°mokkal',
                'C': 'Fenntarthat√≥s√°g + r√©szletes AI magyar√°zatok'
            };
            
            const userGroupElement = document.getElementById('user-group');
            if (userGroupElement) {
                userGroupElement.textContent = 
                    this.testGroup + ' (' + groupDescriptions[this.testGroup] + ')';
            }
            
            console.log('üë• Csoport megjelen√≠tve:', this.testGroup);
        } catch (error) {
            console.error('‚ùå Felhaszn√°l√≥i megjelen√≠t√©s hiba:', error);
        }
    }
    
    handleSearch() {
        try {
            const searchInput = document.getElementById('ingredient-search');
            if (!searchInput) {
                throw new Error('Keres√©si mez≈ë nem tal√°lhat√≥');
            }
            
            const ingredients = searchInput.value.trim();
            if (!ingredients) {
                alert('K√©rj√ºk, adjon meg legal√°bb egy hozz√°val√≥t!');
                return;
            }
            
            console.log('üîç Keres√©s ind√≠t√°sa:', ingredients);
            
            // Keres√©si id≈ë m√©r√©s√©nek kezdete
            this.searchStartTime = Date.now();
            
            // Intelligens aj√°nl√°sok lek√©r√©se
            const results = this.getIntelligentRecommendations(ingredients);
            
            // Eredm√©nyek megjelen√≠t√©se
            this.displayResults(results, ingredients);
            
        } catch (error) {
            console.error('‚ùå Keres√©si hiba:', error);
            alert('Keres√©si hiba t√∂rt√©nt. K√©rj√ºk, pr√≥b√°lja √∫jra!');
        }
    }
    
    getIntelligentRecommendations(searchIngredients) {
        const ingredientList = searchIngredients.toLowerCase().split(',').map(s => s.trim());
        console.log('üîé Keresett hozz√°val√≥k:', ingredientList);
        
        // 1. Pontos tal√°latok keres√©se
        let exactMatches = this.recipes.filter(recipe => {
            const recipeIngredients = recipe.ingredients.toLowerCase();
            return ingredientList.some(ingredient => 
                recipeIngredients.includes(ingredient)
            );
        });
        
        console.log('üéØ Pontos tal√°latok:', exactMatches.length);
        
        // 2. Ha kev√©s tal√°lat, r√©szleges keres√©s
        if (exactMatches.length < 5) {
            const partialMatches = this.recipes.filter(recipe => {
                const recipeIngredients = recipe.ingredients.toLowerCase();
                const recipeName = recipe.name.toLowerCase();
                const fullText = recipeIngredients + ' ' + recipeName;
                
                return ingredientList.some(ingredient => {
                    if (ingredient.length > 2) {
                        // R√©szleges egyez√©s (els≈ë 3-4 karakter)
                        const partial = ingredient.substring(0, Math.min(4, ingredient.length));
                        return fullText.includes(partial);
                    }
                    return false;
                });
            });
            
            // Egyes√≠t√©s √©s duplik√°tumok elt√°vol√≠t√°sa
            const allMatches = [...exactMatches];
            partialMatches.forEach(recipe => {
                if (!allMatches.some(existing => existing.recipeid === recipe.recipeid)) {
                    allMatches.push(recipe);
                }
            });
            
            exactMatches = allMatches;
            console.log('üîç R√©szleges tal√°latokkal kieg√©sz√≠tve:', exactMatches.length);
        }
        
        // 3. Ha m√©g mindig kev√©s tal√°lat, legjobb receptek hozz√°ad√°sa
        if (exactMatches.length < 8) {
            const topRecipes = this.recipes
                .filter(recipe => !exactMatches.some(existing => existing.recipeid === recipe.recipeid))
                .sort((a, b) => (b.sustainability_index || 0) - (a.sustainability_index || 0))
                .slice(0, 8 - exactMatches.length);
            
            exactMatches = [...exactMatches, ...topRecipes];
            console.log('‚≠ê Legjobb receptekkel kieg√©sz√≠tve:', exactMatches.length);
        }
        
        // 4. Csoport specifikus rendez√©s
        const sortedResults = this.applySortingStrategy(exactMatches);
        
        // 5. Maximum 10 recept visszaad√°sa
        const finalResults = sortedResults.slice(0, 10);
        
        console.log('üìã V√©gs≈ë eredm√©nyek:', finalResults.length, 'recept');
        return finalResults;
    }
    
    // ‚úÖ JAV√çTOTT: Rendez√©si strat√©gia k√∂rnyezetbar√°t logik√°val
    applySortingStrategy(recipes) {
        switch (this.testGroup) {
            case 'A':
                // Kontroll csoport: v√©letlenszer≈± sorrend
                console.log('üé≤ A csoport: v√©letlenszer≈± rendez√©s');
                return this.shuffleArray([...recipes]);
                
            case 'B':
            case 'C':
                // ‚úÖ JAV√çTOTT: Fenntarthat√≥s√°gi csoportok: k√∂rnyezetbar√°t rendez√©s
                console.log('üå± B/C csoport: k√∂rnyezetbar√°t rendez√©s');
                return this.sortRecipesBySustainability(recipes);
                
            default:
                return recipes;
        }
    }
    
    // ‚úÖ √öJ: K√∂rnyezetbar√°t rendez√©s (alacsony env_score = jobb)
    sortRecipesBySustainability(recipes) {
        return recipes.sort((a, b) => {
            // 1. Els≈ëdleges: fenntarthat√≥s√°g index (magasabb = jobb)
            const sustainabilityDiff = (b.sustainability_index || 0) - (a.sustainability_index || 0);
            if (Math.abs(sustainabilityDiff) > 5) {
                return sustainabilityDiff;
            }
            
            // 2. M√°sodlagos: k√∂rnyezeti pontsz√°m (ALACSONYABB = jobb!)
            const envDiff = (a.env_score || 0) - (b.env_score || 0);
            if (Math.abs(envDiff) > 2) {
                return envDiff;
            }
            
            // 3. Harmadlagos: t√°pl√°lkoz√°si pontsz√°m (magasabb = jobb)
            return (b.nutri_score || 0) - (a.nutri_score || 0);
        });
    }
    
    // ‚úÖ √öJ: K√∂rnyezeti sz√≠nk√≥dol√°s (alacsony = z√∂ld)
    getEnvironmentalColor(score) {
        // Alacsony pontsz√°m = j√≥ a k√∂rnyezetnek = z√∂ld
        if (score <= 20) return '#4CAF50';      // Z√∂ld - k√∂rnyezetbar√°t
        if (score <= 50) return '#FF9800';      // Narancs - k√∂zepes
        return '#F44336';                       // Piros - k√∂rnyezetszennyez≈ë
    }
    
    // ‚úÖ √öJ: K√∂rnyezeti c√≠mk√©k
    getEnvironmentalLabel(score) {
        if (score <= 20) return 'K√∂rnyezetbar√°t';
        if (score <= 50) return 'K√∂zepes hat√°s';
        return 'Nagy k√∂rnyezeti terhel√©s';
    }
    
    shuffleArray(array) {
        const shuffled = [...array];
        for (let i = shuffled.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
        }
        return shuffled;
    }
    
    displayResults(recipes, searchIngredients) {
        const resultsDiv = document.getElementById('search-results');
        
        if (!resultsDiv) {
            console.error('‚ùå Eredm√©nyek div nem tal√°lhat√≥');
            return;
        }
        
        if (recipes.length === 0) {
            resultsDiv.innerHTML = `
                <div style="text-align: center; padding: 2rem; color: #666;">
                    <h3>üîç Nincs tal√°lat</h3>
                    <p>Nem tal√°ltunk receptet a keresett hozz√°val√≥kkal.</p>
                    <p><strong>Pr√≥b√°lja ezeket:</strong> csirke, hal, sal√°ta, t√©szta, joghurt, paradicsom, hagyma, tej, toj√°s</p>
                </div>
            `;
            return;
        }
        
        let html = `
            <div style="margin-bottom: 1.5rem; padding: 1rem; background: #f8f9fa; border-radius: 8px;">
                <h3>üìã Aj√°nlott receptek (${recipes.length} tal√°lat)</h3>
                <p style="color: #666; font-size: 0.9rem; margin: 0.5rem 0 0 0;">
                    üîç Keres√©s: "<strong>${searchIngredients}</strong>" | 
                    üë• Csoport: <strong>${this.testGroup}</strong> | 
                    üìä ${this.getGroupDescription()}
                </p>
            </div>
        `;
        
        recipes.forEach((recipe, index) => {
            html += this.generateEnhancedRecipeCard(recipe, index, searchIngredients);
        });
        
        resultsDiv.innerHTML = html;
        console.log('‚úÖ Eredm√©nyek megjelen√≠tve:', recipes.length, 'recept');
    }
    
    getGroupDescription() {
        switch (this.testGroup) {
            case 'A': return 'V√©letlenszer≈± sorrend';
            case 'B': return 'Fenntarthat√≥s√°g szerint rendezve';
            case 'C': return 'Fenntarthat√≥s√°g + AI magyar√°zatok';
            default: return '';
        }
    }
    
    generateEnhancedRecipeCard(recipe, index, searchIngredients) {
        const showScores = ['B', 'C'].includes(this.testGroup);
        const showXAI = this.testGroup === 'C';
        
        const categoryIcon = recipe.categoryIcon || 'üç¥';
        
        return `
            <div class="recipe-card" style="margin-bottom: 1.5rem; border: 2px solid #e9ecef; border-radius: 12px; padding: 1.5rem; background: #ffffff;">
                <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 1rem;">
                    <div class="recipe-name" style="flex: 1; font-size: 1.25rem; font-weight: bold; color: #2c3e50;">
                        ${categoryIcon} ${recipe.name}
                    </div>
                    <div style="font-size: 0.8rem; color: #6c757d; margin-left: 1rem; background: #e9ecef; padding: 2px 8px; border-radius: 12px;">
                        #${index + 1}
                    </div>
                </div>
                
                <div class="recipe-ingredients" style="margin-bottom: 1rem; line-height: 1.4;">
                    <strong>ü•ó Hozz√°val√≥k:</strong> ${this.highlightSearchTerms(recipe.ingredients, searchIngredients)}
                </div>
                
                ${showScores ? this.generateScoreSection(recipe) : ''}
                
                ${showXAI ? this.generateXAISection(recipe) : ''}
                
                <button class="select-recipe-btn" 
                        onclick="app.selectRecipe(${recipe.recipeid}, '${recipe.name.replace(/'/g, "\\'")}', ${index + 1}, '${searchIngredients.replace(/'/g, "\\'")}')">
                    ‚úÖ Ezt v√°lasztom
                </button>
            </div>
        `;
    }
    
    highlightSearchTerms(ingredients, searchTerms) {
        let highlighted = ingredients;
        const terms = searchTerms.toLowerCase().split(',').map(s => s.trim());
        
        terms.forEach(term => {
            if (term.length > 1) {
                const regex = new RegExp(`(${term})`, 'gi');
                highlighted = highlighted.replace(regex, '<mark style="background: #fff3cd; padding: 1px 3px; border-radius: 3px; font-weight: bold;">$1</mark>');
            }
        });
        
        return highlighted;
    }
    
    // ‚úÖ JAV√çTOTT: Pontsz√°m szekci√≥ k√∂rnyezeti sz√≠nez√©ssel
    generateScoreSection(recipe) {
        const sustainabilityLevel = this.getSustainabilityLevel(recipe.sustainability_index || 0);
        const envColor = this.getEnvironmentalColor(recipe.env_score || 0);
        const envLabel = this.getEnvironmentalLabel(recipe.env_score || 0);
        
        return `
            <div class="sustainability-scores" style="background: #f8f9fa; padding: 1rem; border-radius: 8px; margin: 1rem 0; border-left: 4px solid ${sustainabilityLevel.color};">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 0.5rem; margin-bottom: 0.5rem;">
                    <div class="score env-score" style="font-size: 0.9rem; padding: 0.5rem; background: ${envColor}; color: white; border-radius: 4px; text-align: center;">
                        üåç K√∂rnyezeti: <strong>${(recipe.env_score || 0).toFixed(1)}</strong><br>
                        <small style="font-size: 0.8rem;">${envLabel}</small>
                    </div>
                    <div class="score nutri-score" style="font-size: 0.9rem; padding: 0.5rem; background: #28a745; color: white; border-radius: 4px; text-align: center;">
                        üíö T√°pl√°lkoz√°si: <strong>${(recipe.nutri_score || 0).toFixed(1)}</strong>
                    </div>
                </div>
                <div class="score" style="text-align: center; font-weight: bold; padding: 0.75rem; background: ${sustainabilityLevel.color}; border-radius: 6px; color: white; font-size: 1rem;">
                    ‚≠ê Fenntarthat√≥s√°g: ${(recipe.sustainability_index || 0).toFixed(1)}/100 (${sustainabilityLevel.label})
                </div>
            </div>
        `;
    }
    
    getSustainabilityLevel(score) {
        if (score >= 75) return { label: 'Kiv√°l√≥', color: '#28a745' };
        if (score >= 60) return { label: 'J√≥', color: '#17a2b8' };
        if (score >= 40) return { label: 'K√∂zepes', color: '#ffc107' };
        return { label: 'Fejleszthet≈ë', color: '#dc3545' };
    }
    
    generateXAISection(recipe) {
        return `
            <div class="xai-explanation" style="background: linear-gradient(135deg, #f0f8ff 0%, #e6f3ff 100%); border: 2px solid #b6d7ff; border-radius: 10px; padding: 1.25rem; margin: 1rem 0;">
                <div style="font-weight: bold; color: #0066cc; margin-bottom: 0.75rem; font-size: 1.1rem;">
                    üß† AI Magyar√°zat - Mi√©rt aj√°nljuk ezt a receptet:
                </div>
                <div style="color: #2c3e50; line-height: 1.5; font-size: 0.95rem;">
                    ${this.generateDetailedXAI(recipe)}
                </div>
            </div>
        `;
    }
    
    // ‚úÖ JAV√çTOTT: AI magyar√°zat k√∂rnyezeti logik√°val
    generateDetailedXAI(recipe) {
        const sustainability = recipe.sustainability_index || 0;
        const envScore = recipe.env_score || 0;
        const nutriScore = recipe.nutri_score || 0;
        const category = recipe.category || 'egy√©b';
        
        let explanation = "";
        
        // ‚úÖ JAV√çTOTT Fenntarthat√≥s√°gi √©rt√©kel√©s
        if (sustainability >= 75) {
            explanation += "üåü <strong>Kiv√°l√≥ fenntarthat√≥ v√°laszt√°s!</strong> ";
            if (envScore <= 20) {  // ‚Üê JAV√çTVA: alacsony = j√≥
                explanation += "Rendk√≠v√ºl alacsony k√∂rnyezeti hat√°ssal k√©sz√ºl. ";
            }
            if (nutriScore > 60) {
                explanation += "Magas t√°p√©rt√©k≈± √©s eg√©szs√©ges. ";
            }
            explanation += "Ez a recept kiv√°l√≥an illeszkedik a fenntarthat√≥ √©letm√≥dhoz. ";
        } else if (sustainability >= 60) {
            explanation += "‚úÖ <strong>J√≥ fenntarthat√≥ v√°laszt√°s.</strong> ";
            if (envScore <= 30) {  // ‚Üê JAV√çTVA: alacsony = j√≥
                explanation += "Viszonylag alacsony k√∂rnyezeti hat√°s. ";
            }
            if (nutriScore > 45) {
                explanation += "Eg√©szs√©ges √©s t√°pl√°l√≥. ";
            }
            explanation += "Kiegyens√∫lyozott opci√≥ a fenntarthat√≥s√°g √©s az √≠z k√∂z√∂tt. ";
        } else if (sustainability >= 40) {
            explanation += "‚öñÔ∏è <strong>K√∂zepes fenntarthat√≥s√°g√∫ v√°laszt√°s.</strong> ";
            if (envScore > 50) {  // ‚Üê JAV√çTVA: magas = rossz
                explanation += "Magasabb k√∂rnyezeti hat√°ssal j√°r. ";
            }
            explanation += "Alkalmank√©nt fogyasztva elfogadhat√≥. ";
        } else {
            explanation += "‚ö†Ô∏è <strong>Kev√©sb√© fenntarthat√≥, de √≠zletes v√°laszt√°s.</strong> ";
            if (envScore > 60) {  // ‚Üê JAV√çTVA: magas = rossz
                explanation += "Jelent≈ës k√∂rnyezeti hat√°ssal j√°r. ";
            }
            explanation += "Ritk√°bban fogyasztva √©lvezhet≈ë. ";
        }
        
        // ‚úÖ JAV√çTOTT Kateg√≥ria specifikus tan√°csok
        switch (category) {
            case 'f≈ë√©tel':
                if (envScore > 40) {  // ‚Üê JAV√çTVA: magas env_score = rossz
                    explanation += "<br><em>üí° Tipp: Pr√≥b√°lja n√∂v√©nyi k√∂retekkel kombin√°lni a k√∂rnyezeti hat√°s cs√∂kkent√©s√©hez.</em>";
                } else {
                    explanation += "<br><em>üëç Remek f≈ë√©tel v√°laszt√°s a fenntarthat√≥ t√°pl√°lkoz√°shoz!</em>";
                }
                break;
            case 'sal√°ta':
                explanation += "<br><em>ü•ó Kiv√°l√≥ v√°laszt√°s az eg√©szs√©ges √©s fenntarthat√≥ t√°pl√°lkoz√°shoz!</em>";
                break;
            case 'ital':
                explanation += "<br><em>ü•§ Friss√≠t≈ë √©s eg√©szs√©ges italv√°laszt√°s!</em>";
                break;
            case 'leves':
                explanation += "<br><em>üç≤ T√°pl√°l√≥ √©s fenntarthat√≥ leves opci√≥!</em>";
                break;
            case 'desszert':
                if (envScore <= 30) {  // ‚Üê JAV√çTVA: alacsony = j√≥
                    explanation += "<br><em>üç∞ Fenntarthat√≥ desszert - nyugodt sz√≠vvel √©lvezhet≈ë!</em>";
                } else {
                    explanation += "<br><em>üç∞ √âdes finoms√°g - m√©rt√©kkel fogyasztva.</em>";
                }
                break;
            case 'reggeli':
                explanation += "<br><em>üç≥ Energiad√∫s reggeli a nap kezd√©s√©hez!</em>";
                break;
        }
        
        return explanation;
    }
    
    selectRecipe(recipeId, recipeName, rank, searchIngredients) {
        try {
            // D√∂nt√©si id≈ë sz√°m√≠t√°sa
            const decisionTime = this.searchStartTime ? (Date.now() - this.searchStartTime) / 1000 : 0;
            
            // Kiv√°lasztott recept adatainak kinyer√©se
            const selectedRecipe = this.recipes.find(r => r.recipeid == recipeId);
            
            // V√°laszt√°si adatok √∂ssze√°ll√≠t√°sa
            const choiceData = {
                userId: this.currentUser.id,
                userEmail: this.currentUser.email,
                testGroup: this.testGroup,
                recipeId: recipeId,
                recipeName: recipeName,
                recipeCategory: selectedRecipe ? selectedRecipe.category : 'unknown',
                rank: rank,
                searchIngredients: searchIngredients,
                decisionTime: decisionTime,
                sustainabilityIndex: selectedRecipe ? selectedRecipe.sustainability_index : 0,
                envScore: selectedRecipe ? selectedRecipe.env_score : 0,
                nutriScore: selectedRecipe ? selectedRecipe.nutri_score : 0,
                timestamp: new Date().toISOString(),
                sessionId: this.currentUser.id + '_' + Date.now(),
                version: '2025.06.18'
            };
            
            console.log('‚úÖ Recept v√°laszt√°s r√∂gz√≠tve:', choiceData);
            
            // Helyi t√°rol√°s
            this.saveChoiceLocally(choiceData);
            
            // Felhaszn√°l√≥i visszajelz√©s
            this.showSuccessMessage(recipeName, decisionTime, selectedRecipe);
            
            // K√∂vetkez≈ë szakasz
            this.showSection('thank-you-section');
            
        } catch (error) {
            console.error('‚ùå Recept v√°laszt√°si hiba:', error);
            alert('A v√°laszt√°s r√∂gz√≠t√©se sor√°n hiba t√∂rt√©nt, de a recept ki lett v√°lasztva.');
            this.showSection('thank-you-section');
        }
    }
    
    saveChoiceLocally(choiceData) {
        try {
            const choices = JSON.parse(localStorage.getItem('userChoices') || '[]');
            choices.push(choiceData);
            localStorage.setItem('userChoices', JSON.stringify(choices));
            
            // Statisztik√°k friss√≠t√©se
            const totalChoices = choices.length;
            const avgDecisionTime = choices.reduce((sum, choice) => sum + (choice.decisionTime || 0), 0) / totalChoices;
            const userChoices = choices.filter(choice => choice.userId === this.currentUser.id);
            
            console.log('üíæ V√°laszt√°s mentve helyben');
            console.log('üìä Statisztik√°k:');
            console.log('   - √ñsszes v√°laszt√°s:', totalChoices);
            console.log('   - Felhaszn√°l√≥ v√°laszt√°sai:', userChoices.length);
            console.log('   - √Åtlagos d√∂nt√©si id≈ë:', avgDecisionTime.toFixed(1) + 's');
            
        } catch (error) {
            console.error('‚ùå Helyi ment√©si hiba:', error);
        }
    }
    
    showSuccessMessage(recipeName, decisionTime, selectedRecipe) {
        const sustainabilityText = selectedRecipe && selectedRecipe.sustainability_index 
            ? `\nüå± Fenntarthat√≥s√°g: ${selectedRecipe.sustainability_index.toFixed(1)}/100`
            : '';
            
        const categoryText = selectedRecipe && selectedRecipe.category
            ? `\nüìÇ Kateg√≥ria: ${selectedRecipe.category}`
            : '';
            
        const message = `K√∂sz√∂nj√ºk a v√°laszt√°s√°t!\n\nüçΩÔ∏è V√°lasztott recept: ${recipeName}${categoryText}${sustainabilityText}\n‚è±Ô∏è D√∂nt√©si id≈ë: ${decisionTime.toFixed(1)} m√°sodperc\n\n‚úÖ A v√°laszt√°s sikeresen r√∂gz√≠tve!`;
        
        alert(message);
    }
    
    showSection(sectionId) {
        try {
            // Minden szakasz elrejt√©se
            document.querySelectorAll('.section').forEach(section => {
                section.classList.add('hidden');
            });
            
            // C√©l szakasz megjelen√≠t√©se
            const targetSection = document.getElementById(sectionId);
            if (targetSection) {
                targetSection.classList.remove('hidden');
                console.log('üìÑ Szakasz v√°lt√°s:', sectionId);
            } else {
                console.error('‚ùå Szakasz nem tal√°lhat√≥:', sectionId);
            }
        } catch (error) {
            console.error('‚ùå Szakasz megjelen√≠t√©si hiba:', error);
        }
    }
}

// Alkalmaz√°s glob√°lis p√©ld√°nya
let app;

// Alkalmaz√°s ind√≠t√°sa a DOM bet√∂lt√©se ut√°n
document.addEventListener('DOMContentLoaded', () => {
    try {
        console.log('üåü Recipe Research System - Legfrissebb verzi√≥ ind√≠t√°sa...');
        console.log('üìÖ Verzi√≥: 2025.06.18 - 1000 Magyar Recept + JAV√çTOTT K√ñRNYEZETI LOGIKA');
        app = new RecipeResearchSystem();
    } catch (error) {
        console.error('‚ùå Alkalmaz√°s ind√≠t√°si hiba:', error);
        alert('Az alkalmaz√°s ind√≠t√°sa sikertelen. K√©rj√ºk, t√∂ltse √∫jra az oldalt.');
    }
});

// Debug √©s fejleszt≈ëi funkci√≥k (Console-ban haszn√°lhat√≥k)
window.debugApp = {
    // Felhaszn√°l√≥i adatok megjelen√≠t√©se
    showUserData: () => {
        console.log('üë§ Jelenlegi felhaszn√°l√≥:', app.currentUser);
        console.log('üìä √ñsszes v√°laszt√°s:', JSON.parse(localStorage.getItem('userChoices') || '[]'));
        console.log('üéØ Teszt csoport:', app.testGroup);
    },
    
    // Receptek t√°bl√°zatos megjelen√≠t√©se
    showRecipes: (limit = 20) => {
        const recipes = app.recipes.slice(0, limit);
        console.table(recipes.map(r => ({
            id: r.recipeid,
            name: r.name.substring(0, 30),
            category: r.category,
            sustainability: r.sustainability_index?.toFixed(1),
            env: r.env_score?.toFixed(1),
            nutri: r.nutri_score?.toFixed(1)
        })));
        console.log(`Megjelen√≠tve: ${recipes.length}/${app.recipes.length} recept`);
    },
    
    // Keres√©s szimul√°l√°sa
    simulateSearch: (term) => {
        if (app.recipes.length === 0) {
            console.warn('Nincs bet√∂lt√∂tt recept!');
            return;
        }
        document.getElementById('ingredient-search').value = term;
        app.handleSearch();
        console.log(`Keres√©s szimul√°lva: "${term}"`);
    },
    
    // Statisztik√°k megjelen√≠t√©se
    showStats: () => {
        const choices = JSON.parse(localStorage.getItem('userChoices') || '[]');
        const userChoices = choices.filter(c => c.userId === app.currentUser?.id);
        
        console.log('üìà Alkalmaz√°s statisztik√°k:');
        console.log('   Bet√∂lt√∂tt receptek:', app.recipes.length);
        console.log('   √ñsszes v√°laszt√°s:', choices.length);
        console.log('   Felhaszn√°l√≥ v√°laszt√°sai:', userChoices.length);
        
        if (choices.length > 0) {
            const avgDecisionTime = choices.reduce((sum, c) => sum + c.decisionTime, 0) / choices.length;
            console.log('   √Åtlagos d√∂nt√©si id≈ë:', avgDecisionTime.toFixed(1) + 's');
            
            // Csoport breakdown
            const groupBreakdown = {};
            choices.forEach(c => {
                groupBreakdown[c.testGroup] = (groupBreakdown[c.testGroup] || 0) + 1;
            });
            console.log('   Csoport megoszl√°s:', groupBreakdown);
        }
    },
    
    // Kateg√≥ri√°k elemz√©se
    analyzeCategories: () => {
        const categories = {};
        app.recipes.forEach(recipe => {
            const cat = recipe.category || 'egy√©b';
            categories[cat] = (categories[cat] || 0) + 1;
        });
        
        console.log('üìä Kateg√≥ria megoszl√°s:');
        Object.entries(categories)
            .sort((a, b) => b[1] - a[1])
            .forEach(([cat, count]) => {
                const percentage = ((count / app.recipes.length) * 100).toFixed(1);
                console.log(`   ${cat}: ${count} recept (${percentage}%)`);
            });
    },
    
    // Adatok t√∂rl√©se √©s √∫jraind√≠t√°s
    clearData: () => {
        if (confirm('Biztosan t√∂rli az √∂sszes helyi adatot √©s √∫jraind√≠tja az alkalmaz√°st?')) {
            localStorage.clear();
            location.reload();
        }
    },
    
    // Export adatok CSV form√°tumban
    exportChoices: () => {
        const choices = JSON.parse(localStorage.getItem('userChoices') || '[]');
        if (choices.length === 0) {
            console.log('Nincs export√°land√≥ adat');
            return;
        }
        
        const csv = [
            // Header
            Object.keys(choices[0]).join(','),
            // Rows
            ...choices.map(choice => Object.values(choice).join(','))
        ].join('\n');
        
        console.log('CSV Export:');
        console.log(csv);
        
        // Download trigger (ha sz√ºks√©ges)
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `recipe_choices_${new Date().getTime()}.csv`;
        a.click();
        URL.revokeObjectURL(url);
    }
};
